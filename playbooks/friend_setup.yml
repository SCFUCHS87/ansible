---
- name: Friend Home Automation + Media Setup
  hosts: all
  become: yes
  gather_facts: yes
  
  vars_prompt:
    - name: install_homeassistant
      prompt: "Install Home Assistant? (yes/no)"
      default: "yes"
      private: no
    
    - name: install_homebridge
      prompt: "Install Homebridge? (yes/no)"
      default: "no"
      private: no

    - name: install_plex
      prompt: "Install Plex Media Server? (yes/no)"
      default: "yes"
      private: no

    - name: install_cockpit
      prompt: "Install Cockpit (web management)? (yes/no)"
      default: "yes"
      private: no

    - name: ha_config_dir
      prompt: "Home Assistant config volume path (default: /opt/homeassistant)"
      private: no
      default: "/opt/homeassistant"
      when: install_homeassistant | default(false) | bool

    - name: homebridge_port
      prompt: "Homebridge UI port (default: 8581)"
      private: no
      default: "8581"
      when: install_homebridge | default(false) | bool

    - name: plex_config_dir
      prompt: "Plex config directory (default: /opt/plex/config)"
      private: no
      default: "/opt/plex/config"
      when: install_plex | default(false) | bool

    - name: plex_media_dir
      prompt: "Plex media directory (default: /opt/plex/media)"
      private: no
      default: "/opt/plex/media"
      when: install_plex | default(false) | bool

    - name: force_recreate
      prompt: "Force recreate containers if they exist? (yes/no)"
      private: no
      default: "no"

  pre_tasks:
    - name: Ensure we're running on x86_64
      fail:
        msg: "This playbook is designed for x86_64 systems only"
      when: ansible_architecture != "x86_64"

    - name: Check for existing Docker containers
      docker_container_info:
        name: "{{ item }}"
      register: existing_containers
      loop:
        - homeassistant
        - homebridge
        - plex
      ignore_errors: true

    - name: Display existing container warning
      debug:
        msg: |
          WARNING: Found existing containers:
          {% for container in existing_containers.results %}
          {% if container.exists %}
          - {{ container.container.Name[1:] }} ({{ container.container.State.Status }})
          {% endif %}
          {% endfor %}
          {% if force_recreate | bool %}
          These will be recreated with new settings.
          {% else %}
          Existing containers will be updated in place.
          {% endif %}
      when: existing_containers.results | selectattr('exists') | list | length > 0

    - name: Check port conflicts
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: "{{ item.port }}"
        timeout: 1
      register: port_checks
      ignore_errors: true
      loop:
        - { service: "Home Assistant", port: 8123, condition: "{{ install_homeassistant | bool }}" }
        - { service: "Homebridge", port: "{{ homebridge_port | default('8581') }}", condition: "{{ install_homebridge | bool }}" }
        - { service: "Plex", port: 32400, condition: "{{ install_plex | bool }}" }
        - { service: "Cockpit", port: 9090, condition: "{{ install_cockpit | bool }}" }
      when: item.condition

  roles:
    - role: base
      tags: [base, always]
    
    - role: docker
      tags: [docker, always]

  tasks:
    # Cockpit Installation
    - name: Install Cockpit
      block:
        - name: Install Cockpit packages
          apt:
            name:
              - cockpit
              - cockpit-docker
              - cockpit-podman
            state: present
            update_cache: yes

        - name: Enable and start Cockpit
          systemd:
            name: cockpit.socket
            state: started
            enabled: yes

        - name: Configure firewall for Cockpit
          ufw:
            rule: allow
            port: 9090
            proto: tcp
            comment: "Cockpit Web Console"

      when: install_cockpit | bool
      tags: [cockpit]

    # Stop existing containers if force recreate
    - name: Stop existing containers if force recreate
      docker_container:
        name: "{{ item }}"
        state: stopped
      when: force_recreate | bool
      ignore_errors: true
      loop:
        - homeassistant
        - homebridge
        - plex

    # Create directories
    - name: Create service directories
      file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - { path: "{{ ha_config_dir | default('/opt/homeassistant') }}", condition: "{{ install_homeassistant | bool }}" }
        - { path: "/opt/homebridge", condition: "{{ install_homebridge | bool }}" }
        - { path: "{{ plex_config_dir | default('/opt/plex/config') }}", condition: "{{ install_plex | bool }}" }
        - { path: "{{ plex_media_dir | default('/opt/plex/media') }}", condition: "{{ install_plex | bool }}" }
      when: item.condition

    # Home Assistant
    - name: Deploy Home Assistant
      block:
        - name: Pull Home Assistant image
          docker_image:
            name: "ghcr.io/home-assistant/home-assistant:stable"
            source: pull

        - name: Run Home Assistant container
          docker_container:
            name: homeassistant
            image: "ghcr.io/home-assistant/home-assistant:stable"
            restart_policy: unless-stopped
            recreate: "{{ force_recreate | default(false) }}"
            network_mode: host
            volumes:
              - /etc/localtime:/etc/localtime:ro
              - "{{ ha_config_dir | default('/opt/homeassistant') }}:/config"
            env:
              TZ: "{{ timezone | default('America/Chicago') }}"

        - name: Configure firewall for Home Assistant
          ufw:
            rule: allow
            port: 8123
            proto: tcp
            comment: "Home Assistant"

      when: install_homeassistant | bool
      tags: [homeassistant]

    # Homebridge
    - name: Deploy Homebridge
      block:
        - name: Pull Homebridge image
          docker_image:
            name: "oznu/homebridge:latest"
            source: pull

        - name: Run Homebridge container
          docker_container:
            name: homebridge
            image: "oznu/homebridge:latest"
            restart_policy: unless-stopped
            recreate: "{{ force_recreate | default(false) }}"
            ports:
              - "{{ homebridge_port | default('8581') }}:8581"
            volumes:
              - "/opt/homebridge:/homebridge"
            env:
              TZ: "{{ timezone | default('America/Chicago') }}"
              PGID: "1000"
              PUID: "1000"
              HOMEBRIDGE_CONFIG_UI: "1"
              HOMEBRIDGE_CONFIG_UI_PORT: "8581"

        - name: Configure firewall for Homebridge
          ufw:
            rule: allow
            port: "{{ homebridge_port | default('8581') }}"
            proto: tcp
            comment: "Homebridge"

      when: install_homebridge | bool
      tags: [homebridge]

    # Plex Media Server
    - name: Deploy Plex
      block:
        - name: Pull Plex image
          docker_image:
            name: "plexinc/pms-docker:latest"
            source: pull

        - name: Run Plex container
          docker_container:
            name: plex
            image: "plexinc/pms-docker:latest"
            restart_policy: unless-stopped
            recreate: "{{ force_recreate | default(false) }}"
            network_mode: host
            volumes:
              - "{{ plex_config_dir | default('/opt/plex/config') }}:/config"
              - "{{ plex_media_dir | default('/opt/plex/media') }}:/data"
              - /tmp:/transcode
            env:
              TZ: "{{ timezone | default('America/Chicago') }}"
              PLEX_CLAIM: ""
              ADVERTISE_IP: "http://{{ ansible_default_ipv4.address }}:32400/"

        - name: Configure firewall for Plex
          ufw:
            rule: allow
            port: 32400
            proto: tcp
            comment: "Plex Media Server"

        - name: Configure additional Plex ports
          ufw:
            rule: allow
            port: "{{ item }}"
            proto: udp
            comment: "Plex Discovery"
          loop:
            - 1900
            - 5353
            - 32410
            - 32412
            - 32413
            - 32414

      when: install_plex | bool
      tags: [plex]

  post_tasks:
    - name: Wait for services to start
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: "{{ item.port }}"
        delay: 5
        timeout: 60
      ignore_errors: true
      loop:
        - { service: "Home Assistant", port: 8123, condition: "{{ install_homeassistant | bool }}" }
        - { service: "Homebridge", port: "{{ homebridge_port | default('8581') }}", condition: "{{ install_homebridge | bool }}" }
        - { service: "Plex", port: 32400, condition: "{{ install_plex | bool }}" }
        - { service: "Cockpit", port: 9090, condition: "{{ install_cockpit | bool }}" }
      when: item.condition

    - name: Display service information
      debug:
        msg: |
          üéâ Setup complete! Services available:
          
          {% if install_cockpit | bool %}
          üñ•Ô∏è  Cockpit (Server Management): https://{{ ansible_default_ipv4.address }}:9090
              Login with your system user credentials
          {% endif %}
          
          {% if install_homeassistant | bool %}
          üè† Home Assistant: http://{{ ansible_default_ipv4.address }}:8123
              Config: {{ ha_config_dir | default('/opt/homeassistant') }}
          {% endif %}
          
          {% if install_homebridge | bool %}
          üåâ Homebridge: http://{{ ansible_default_ipv4.address }}:{{ homebridge_port | default('8581') }}
              Config: /opt/homebridge
              Default login: admin/admin (change immediately!)
          {% endif %}
          
          {% if install_plex | bool %}
          üé¨ Plex Media Server: http://{{ ansible_default_ipv4.address }}:32400/web
              Config: {{ plex_config_dir | default('/opt/plex/config') }}
              Media: {{ plex_media_dir | default('/opt/plex/media') }}
              ‚ö†Ô∏è  Complete setup at: http://{{ ansible_default_ipv4.address }}:32400/web
          {% endif %}
          
          üîß Management commands:
          - View logs: docker logs <container_name>
          - Restart: docker restart <container_name>
          - Stop: docker stop <container_name>
          - Cockpit: systemctl status cockpit.socket

    - name: Display Plex setup instructions
      debug:
        msg: |
          üì∫ Plex First-Time Setup:
          1. Visit: http://{{ ansible_default_ipv4.address }}:32400/web
          2. Sign in with your Plex account (or create one)
          3. Name your server
          4. Add media libraries pointing to: {{ plex_media_dir | default('/opt/plex/media') }}
          5. Upload your media files to the media directory
          
          üí° Tips:
          - Organize media in folders like: Movies/, TV Shows/, Music/
          - Plex will automatically scan and organize your content
          - Use Cockpit to easily upload files via the web interface
      when: install_plex | bool
